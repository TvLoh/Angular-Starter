/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiV1BugsAppendBugRetrieve } from '../fn/ado/api-v-1-bugs-append-bug-retrieve';
import { ApiV1BugsAppendBugRetrieve$Params } from '../fn/ado/api-v-1-bugs-append-bug-retrieve';
import { apiV1BugsShowBugInfoRetrieve } from '../fn/ado/api-v-1-bugs-show-bug-info-retrieve';
import { ApiV1BugsShowBugInfoRetrieve$Params } from '../fn/ado/api-v-1-bugs-show-bug-info-retrieve';
import { apiV1BugsWriteBugRetrieve } from '../fn/ado/api-v-1-bugs-write-bug-retrieve';
import { ApiV1BugsWriteBugRetrieve$Params } from '../fn/ado/api-v-1-bugs-write-bug-retrieve';

@Injectable({ providedIn: 'root' })
export class AdoApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiV1BugsAppendBugRetrieve()` */
  static readonly ApiV1BugsAppendBugRetrievePath = '/api/v1/bugs/append_bug/{bug_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1BugsAppendBugRetrieve()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsAppendBugRetrieve$Response(params: ApiV1BugsAppendBugRetrieve$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1BugsAppendBugRetrieve(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1BugsAppendBugRetrieve$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsAppendBugRetrieve(params: ApiV1BugsAppendBugRetrieve$Params, context?: HttpContext): Observable<void> {
    return this.apiV1BugsAppendBugRetrieve$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1BugsShowBugInfoRetrieve()` */
  static readonly ApiV1BugsShowBugInfoRetrievePath = '/api/v1/bugs/show_bug_info/{bug_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1BugsShowBugInfoRetrieve()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsShowBugInfoRetrieve$Response(params: ApiV1BugsShowBugInfoRetrieve$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1BugsShowBugInfoRetrieve(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1BugsShowBugInfoRetrieve$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsShowBugInfoRetrieve(params: ApiV1BugsShowBugInfoRetrieve$Params, context?: HttpContext): Observable<void> {
    return this.apiV1BugsShowBugInfoRetrieve$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1BugsWriteBugRetrieve()` */
  static readonly ApiV1BugsWriteBugRetrievePath = '/api/v1/bugs/write_bug';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1BugsWriteBugRetrieve()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsWriteBugRetrieve$Response(params: ApiV1BugsWriteBugRetrieve$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1BugsWriteBugRetrieve(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1BugsWriteBugRetrieve$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1BugsWriteBugRetrieve(params: ApiV1BugsWriteBugRetrieve$Params, context?: HttpContext): Observable<void> {
    return this.apiV1BugsWriteBugRetrieve$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
