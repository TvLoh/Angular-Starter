/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface ApiV1BugsWriteBugRetrieve$Params {

/**
 * Firmware version to which the page should be redirected, needed for FirmwareVersionResults as previous page
 */
  firmware_version?: string;

/**
 * major firmware version to which the page should be redirected, needed for TestCaseResults as previous page
 */
  major_version_name?: string;

/**
 * pre-analyse-findings for the given bug
 */
  pre_analyse_findings?: string;

/**
 * hint to where to redirect again, options are: Log, TestResults, FirmwareResults, TestCaseResults
 */
  previous_page: string;

/**
 * Name of the testcase to which the page should be redirected, needed for TestCaseResults as previous page
 */
  testcase_id?: string;

/**
 * List of TestRun IDs for which the bug should be written (comma separated list of INTs)
 */
  testrun_ids: string;

/**
 * Name of the testset to which the page should be redirected, needed for TestResults as previous page
 */
  testset_name?: string;
}

export function apiV1BugsWriteBugRetrieve(http: HttpClient, rootUrl: string, params: ApiV1BugsWriteBugRetrieve$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, apiV1BugsWriteBugRetrieve.PATH, 'get');
  if (params) {
    rb.query('firmware_version', params.firmware_version, {});
    rb.query('major_version_name', params.major_version_name, {});
    rb.query('pre_analyse_findings', params.pre_analyse_findings, {});
    rb.query('previous_page', params.previous_page, {});
    rb.query('testcase_id', params.testcase_id, {});
    rb.query('testrun_ids', params.testrun_ids, {});
    rb.query('testset_name', params.testset_name, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

apiV1BugsWriteBugRetrieve.PATH = '/api/v1/bugs/write_bug';
