/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface ApiV1DataTestcaseresultsRetrieve$Params {

/**
 * limits the selected firmware starting from this firmware version
 */
  from_fw?: string;

/**
 * name of major firmware version
 */
  major_version_name: string;

/**
 * Testcase ID
 */
  testcase_id: number;

/**
 * limits the selected firmware to this firmware version
 */
  to_fw?: string;
}

export function apiV1DataTestcaseresultsRetrieve(http: HttpClient, rootUrl: string, params: ApiV1DataTestcaseresultsRetrieve$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, apiV1DataTestcaseresultsRetrieve.PATH, 'get');
  if (params) {
    rb.query('from_fw', params.from_fw, {});
    rb.path('major_version_name', params.major_version_name, {});
    rb.path('testcase_id', params.testcase_id, {});
    rb.query('to_fw', params.to_fw, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

apiV1DataTestcaseresultsRetrieve.PATH = '/api/v1/data/testcaseresults/{testcase_id}/{major_version_name}';
